import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * Copyright © 2024 Museum für Naturkunde Berlin.
 * This code is licensed under MIT license (see LICENSE.txt for details)
 */

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.android.ksp)
    alias(libs.plugins.android.navigation)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.room)
    id 'berlin.mfn.naturblick.strapidbgenerator' version '1.0.0'
}

def version = new Properties()
file("../version.properties").withInputStream { version.load(it) }

android {
    compileSdk 35

    defaultConfig {
        applicationId "com.mfn_berlin_stadtnatur_entdecken.naturblick"
        minSdk 21
        targetSdk 35
        versionCode Integer.parseInt(version.getProperty("version.code"))
        versionName version.getProperty("version.name")
        def strapiBaseUrl = "https://naturblick.museumfuernaturkunde.berlin/strapi/"
        syncReleaseMedia.strapiBaseUrl = strapiBaseUrl
        def djangoBaseUrl = "https://naturblick.museumfuernaturkunde.berlin/"
        syncReleaseMedia.djangoBaseUrl = djangoBaseUrl + "django/"
        syncReleaseDb.djangoBaseUrl = djangoBaseUrl + "django/"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "STRAPI_URL", "\"$strapiBaseUrl\"")
        buildConfigField("String", "DJANGO_URL", "\"$djangoBaseUrl\"")
        buildConfigField("String", "BACKEND_URL", "\"https://naturblick.museumfuernaturkunde.berlin/api/\"")
        buildConfigField("String", "ANALYTICS_URL", "\"https://naturblick.museumfuernaturkunde.berlin/analytics\"")
        buildConfigField("String", "STYLE_URL", "\"mapbox://styles/stadtnaturentdecken/ckhg9nswa19dy19npe3nb5uia\"")
        resValue("string", "mapbox_access_token", providers.gradleProperty("MAPBOX_ACCESS_TOKEN").getOrElse(System.getenv("MAPBOX_ACCESS_TOKEN")))
        resourceConfigurations += ['en', 'de']
        room {
            schemaDirectory "$projectDir/schemas"
        }
    }
    signingConfigs {
        release {
            keyAlias "upload"
            keyPassword System.env.KEYSTORE_PASSWORD
            storeFile file("../upload-keystore.jks")
            storePassword System.env.KEYSTORE_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.release
        }
        named("debug") {
            applicationIdSuffix = ".debug"
            def strapiBaseUrl = "https://staging.naturblick.museumfuernaturkunde.berlin/strapi/"
            syncDebugMedia.strapiBaseUrl = strapiBaseUrl
            def djangoBaseUrl = "https://staging.naturblick.museumfuernaturkunde.berlin/"
            syncDebugMedia.djangoBaseUrl = djangoBaseUrl + "django/"
            syncDebugDb.djangoBaseUrl = djangoBaseUrl + "django/"
            buildConfigField("String", "BACKEND_URL", "\"https://staging.naturblick.museumfuernaturkunde.berlin/api/\"")
            buildConfigField("String", "ANALYTICS_URL", "\"https://staging.naturblick.museumfuernaturkunde.berlin/analytics/\"")
            buildConfigField("String", "STRAPI_URL", "\"$strapiBaseUrl\"")
            buildConfigField("String", "DJANGO_URL", "\"$djangoBaseUrl\"")
        }
    }
    compileOptions {
        // Flag to enable support for java 1.8 APIs
        coreLibraryDesugaringEnabled = true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_17
        }
    }
    buildFeatures {
        dataBinding = true
        buildConfig = true
        compose = true
    }
    sourceSets {
        main.assets.srcDirs += 'build/assets'
        main.res.srcDirs += 'build/generated/res'
    }
    namespace = 'berlin.mfn.naturblick'
    applicationVariants.all { variant ->
        tasks.named("merge${variant.name.capitalize()}Assets") {
            dependsOn(tasks.named("sync${variant.name.capitalize()}Db"))
        }
        tasks.named("generate${variant.name.capitalize()}ResValues") {
            dependsOn(tasks.named("sync${variant.name.capitalize()}Media"))
        }
        tasks.named("map${variant.name.capitalize()}SourceSetPaths") {
            dependsOn(tasks.named("merge${variant.name.capitalize()}Resources"))
        }
        tasks.named("sync${variant.name.capitalize()}Media") {
            imageDirectory = layout.buildDirectory.dir("generated/res/drawable")
        }
        tasks.named("sync${variant.name.capitalize()}Media") {
            nodpiDirectory = layout.buildDirectory.dir("generated/res/drawable-nodpi")
        }
    }
}

tasks.matching { it.name.toLowerCase().contains("lint") }
        .configureEach {
            dependsOn tasks.named("syncReleaseDb")
        }

dependencies {
    def composeBom = platform(libs.androidx.compose.bom)
    implementation composeBom
    androidTestImplementation composeBom
    implementation libs.androidx.material
    implementation libs.androidx.activity.compose
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.ui.viewbinding
    implementation libs.androidx.material.icons.core
    implementation libs.androidx.compose.ui.text

    // Android Studio Preview support
    implementation libs.androidx.ui.tooling.preview
    debugImplementation libs.androidx.ui.tooling

    implementation libs.androidx.fragment.compose

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.exifinterface
    implementation libs.androidx.media3.exoplayer

    implementation libs.android.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui

    implementation libs.androidx.paging.runtime
    implementation libs.androidx.paging.compose
    implementation libs.android.gms
    implementation libs.glide
    implementation libs.glide.compose

    implementation libs.retrofit
    implementation libs.retrofit.serialization

    implementation libs.kotlinx.serialization
    implementation libs.okhttp.interceptor

    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.paging
    implementation(libs.androidx.work.runtime.ktx)

    implementation libs.mapbox.ndk27
    implementation libs.canhub.cropper
    implementation libs.progressbutton

    implementation libs.email.intent.builder

    implementation libs.snowplow.android.tracker

    testImplementation libs.junit

    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    coreLibraryDesugaring libs.android.desugar.jdk.libs

    ksp libs.glide.ksp
    ksp libs.androidx.room.compiler

}
